const { Request } = require('zeromq');

const args = process.argv.slice(2);

if (args.length !== 2) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node game-client <min> <max>');
    console.log('–ü—Ä–∏–º–µ—Ä: node game-client 1 100');
    process.exit(1);
}

const min = parseInt(args[0]);
const max = parseInt(args[1]);

if (isNaN(min) || isNaN(max) || min >= max) {
    console.log('–û—à–∏–±–∫–∞: min –∏ max –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏, –≥–¥–µ min < max');
    process.exit(1);
}

const secretNumber = Math.floor(Math.random() * (max - min + 1)) + min;
console.log(`–ó–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${min}-${max}: ${secretNumber}`);

async function playGame() {
    const requester = new Request();

    await requester.connect('tcp://localhost:5555');

    let gameOver = false;
    let round = 0;

    try {
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ä–≤–µ—Ä—É...');
        await requester.send(JSON.stringify({ range: `${min}-${max}` }));
        
        console.log('–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...');
        
        while (!gameOver) {
            round++;
            const [reply] = await requester.receive();
            const message = JSON.parse(reply.toString());
            console.log(`–†–∞—É–Ω–¥ ${round} - –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, message);
            
            if (message.error) {
                console.log('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', message.error);
                gameOver = true;
                break;
            }
            
            if (message.answer !== undefined) {
                const serverGuess = message.answer;
                console.log(`–°–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç: ${serverGuess}`);
                
                if (serverGuess === secretNumber) {
                    console.log('üéâ –°–µ—Ä–≤–µ—Ä —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.');
                    console.log(`–ü–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å ${round} –ø–æ–ø—ã—Ç–æ–∫`);
                    gameOver = true;
                    break;
                } else if (serverGuess < secretNumber) {
                    console.log('–ü–æ–¥—Å–∫–∞–∑–∫–∞: –±–æ–ª—å—à–µ');
                    await requester.send(JSON.stringify({ hint: 'more' }));
                } else {
                    console.log('–ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–µ–Ω—å—à–µ');
                    await requester.send(JSON.stringify({ hint: 'less' }));
                }
            }
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ:', error);
    } finally {
        await requester.close();
        process.exit(0);
    }
}

process.on('SIGINT', async function() {
    console.log('\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã...');
    process.exit();
});

playGame().catch(console.error);